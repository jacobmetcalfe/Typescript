{"version":3,"sources":["jsonTodoCollection.ts"],"names":["todoItem_1","require","todoCollection_1","lowdb","FileSync","JsonTodoCollection","_super","userName","todoItems","_this","call","this","database","has","value","get","forEach","item","itemMap","set","id","TodoItem","task","complete","write","__extends","prototype","addTodo","result","storeTasks","markComplete","removeComplete","__spreadArrays","values","TodoCollection","exports"],"mappings":"gnBAAA,IAAAA,WAAAC,QAAA,cACAC,iBAAAD,QAAA,oBACAE,MAAAF,QAAA,SACAG,SAAAH,QAAA,2BAKAI,mBAAA,SAAAC,GAEI,SAAAD,EAAmBE,EAAkBC,QAAA,IAAAA,IAAAA,EAAA,IAArC,IAAAC,EACIH,EAAAI,KAAAC,KAAMJ,EAAU,KAAGI,MADJF,EAAAF,SAAAA,EAEfE,EAAKG,SAAWT,MAAM,IAAIC,SAAS,eAC/BK,EAAKG,SAASC,IAAI,SAASC,SACbL,EAAKG,SAASG,IAAI,SAASD,QACjCE,QAAQ,SAAAC,GAAQ,OAAAR,EAAKS,QAAQC,IAAIF,EAAKG,GAC9C,IAAIpB,WAAAqB,SAASJ,EAAKG,GAAIH,EAAKK,KAAML,EAAKM,cAEtCd,EAAKG,SAASO,IAAI,QAASX,GAAWgB,QACtChB,EAAUQ,QAAQ,SAAAC,GAAQ,OAAAR,EAAKS,QAAQC,IAAIF,EAAKG,GAAIH,eAuBhE,OAlCwCQ,UAAApB,EAAAC,GAepCD,EAAAqB,UAAAC,QAAA,SAAQL,GACJ,IAAIM,EAAStB,EAAAoB,UAAMC,QAAOjB,KAAAC,KAACW,GAE3B,OADAX,KAAKkB,aACED,GAGXvB,EAAAqB,UAAAI,aAAA,SAAaV,EAAYG,GACrBjB,EAAAoB,UAAMI,aAAYpB,KAAAC,KAACS,EAAIG,GACvBZ,KAAKkB,cAGTxB,EAAAqB,UAAAK,eAAA,WACIzB,EAAAoB,UAAMK,eAAcrB,KAAAC,MACpBA,KAAKkB,cAGDxB,EAAAqB,UAAAG,WAAR,WACIlB,KAAKC,SAASO,IAAI,QAAOa,eAAMrB,KAAKO,QAAQe,WAAWT,SAE/DnB,EAlCA,CAAwCH,iBAAAgC,gBAA3BC,QAAA9B,mBAAAA","file":"jsonTodoCollection.min.js","sourcesContent":["import { TodoItem } from \"./todoItem\";\r\nimport { TodoCollection } from \"./todoCollection\";\r\nimport * as lowdb from \"lowdb\";\r\nimport * as FileSync from \"lowdb/adapters/FileSync\";\r\n\r\ntype schemaType = {\r\n    tasks: { id: number; task: string; complete: boolean; }[]\r\n};\r\nexport class JsonTodoCollection extends TodoCollection {\r\n    private database: lowdb.LowdbSync<schemaType>;\r\n    constructor(public userName: string, todoItems: TodoItem[] = []) {\r\n        super(userName, []);\r\n        this.database = lowdb(new FileSync(\"Todos.json\"));\r\n        if (this.database.has(\"tasks\").value()) {\r\n            let dbItems = this.database.get(\"tasks\").value();\r\n            dbItems.forEach(item => this.itemMap.set(item.id,\r\n            new TodoItem(item.id, item.task, item.complete)));\r\n        } else {\r\n            this.database.set(\"tasks\", todoItems).write();\r\n            todoItems.forEach(item => this.itemMap.set(item.id, item));\r\n        }\r\n    }\r\n\r\n    addTodo(task: string): number {\r\n        let result = super.addTodo(task);\r\n        this.storeTasks();\r\n        return result;\r\n    }\r\n\r\n    markComplete(id: number, complete: boolean): void {\r\n        super.markComplete(id, complete);\r\n        this.storeTasks();\r\n    }\r\n\r\n    removeComplete(): void {\r\n        super.removeComplete();\r\n        this.storeTasks();\r\n    }\r\n    \r\n    private storeTasks() {\r\n        this.database.set(\"tasks\", [...this.itemMap.values()]).write();\r\n    }\r\n}"]}