{"version":3,"sources":["todoCollection.ts"],"names":["todoItem_1","require","TodoCollection","userName","todoItems","_this","this","nextId","itemMap","Map","forEach","item","set","id","prototype","addTodo","task","getTodoById","push","TodoItem","removeComplete","complete","get","getTodoItems","includeComplete","__spreadArrays","values","filter","getItemCounts","total","size","incomplete","length","markComplete","todoItem","exports"],"mappings":"uQAAA,IAAAA,WAAAC,QAAA,cAOAC,eAAA,WAGI,SAAAA,EAAmBC,EAAyBC,GAA5C,IAAAC,EAAAC,UAA4C,IAAAF,IAAAA,EAAA,IAAzBE,KAAAH,SAAAA,EAAyBG,KAAAF,UAAAA,EAFpCE,KAAAC,OAAiB,EACfD,KAAAE,QAAU,IAAIC,IAEpBL,EAAUM,QAAQ,SAAAC,GAAQ,OAAAN,EAAKG,QAAQI,IAAID,EAAKE,GAAIF,KA0C5D,OAvCIT,EAAAY,UAAAC,QAAA,SAAQC,GACJ,KAAOV,KAAKW,YAAYX,KAAKC,SACzBD,KAAKC,SAIT,OAFAD,KAAKF,UAAUc,KAAK,IAAIlB,WAAAmB,SAASb,KAAKC,OAAQS,IAC9CV,KAAKE,QAAQI,IAAIN,KAAKC,OAAQ,IAAIP,WAAAmB,SAASb,KAAKC,OAAQS,IACjDV,KAAKC,QAGhBL,EAAAY,UAAAM,eAAA,WAAA,IAAAf,EAAAC,KACIA,KAAKE,QAAQE,QAAS,SAAAC,GACdA,EAAKU,UACLhB,EAAKG,QAAc,OAACG,EAAKE,OAKrCX,EAAAY,UAAAG,YAAA,SAAYJ,GACR,OAAOP,KAAKE,QAAQc,IAAIT,IAG5BX,EAAAY,UAAAS,aAAA,SAAaC,GACT,OAAOC,eAAInB,KAAKE,QAAQkB,UAAUC,OAAO,SAAAhB,GAAQ,OAAAa,IAAoBb,EAAKU,YAG9EnB,EAAAY,UAAAc,cAAA,WACI,MAAO,CACHC,MAAQvB,KAAKE,QAAQsB,KACrBC,WAAazB,KAAKiB,cAAa,GAAOS,SAI9C9B,EAAAY,UAAAmB,aAAA,SAAapB,EAAYQ,GACrB,IAAMa,EAAW5B,KAAKW,YAAYJ,GAC9BqB,IACAA,EAASb,SAAWA,IAIhCnB,EA9CA,GAAaiC,QAAAjC,eAAAA","file":"todoCollection.min.js","sourcesContent":["import { TodoItem } from \"./todoItem\";\r\n\r\ntype ItemCounts = {\r\n    total : number,\r\n    incomplete : number\r\n}\r\n\r\nexport class TodoCollection {\r\n    private nextId: number = 1;\r\n    protected itemMap = new Map<number, TodoItem>();\r\n    constructor(public userName: string, public todoItems: TodoItem[] = []){\r\n        todoItems.forEach(item => this.itemMap.set(item.id, item))\r\n    }\r\n\r\n    addTodo(task: string) : number {\r\n        while (this.getTodoById(this.nextId)) {\r\n            this.nextId++;\r\n        }\r\n        this.todoItems.push(new TodoItem(this.nextId, task));\r\n        this.itemMap.set(this.nextId, new TodoItem(this.nextId, task));\r\n        return this.nextId;\r\n    }\r\n\r\n    removeComplete(){\r\n        this.itemMap.forEach( item => {\r\n            if (item.complete) {\r\n                this.itemMap.delete(item.id)\r\n            }\r\n        })\r\n    }\r\n\r\n    getTodoById(id: number) : TodoItem{\r\n        return this.itemMap.get(id);\r\n    }\r\n\r\n    getTodoItems(includeComplete: boolean): TodoItem[] {\r\n        return [...this.itemMap.values()].filter(item => includeComplete || !item.complete);\r\n    }\r\n\r\n    getItemCounts() : ItemCounts {\r\n        return {\r\n            total : this.itemMap.size,\r\n            incomplete : this.getTodoItems(false).length\r\n        };\r\n    }\r\n\r\n    markComplete(id: number, complete: boolean) {\r\n        const todoItem = this.getTodoById(id);\r\n        if (todoItem) {\r\n            todoItem.complete = complete;\r\n        }\r\n    }\r\n\r\n}"]}