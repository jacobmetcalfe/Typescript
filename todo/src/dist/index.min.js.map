{"version":3,"sources":["index.ts"],"names":["Commands","todoItem_1","require","inquirer","jsonTodoCollection_1","todos","TodoItem","collection","JsonTodoCollection","showCompleted","displayTodoList","console","log","userName","getItemCounts","incomplete","getTodoItems","forEach","item","printDetails","promptAdd","clear","prompt","type","name","message","then","answers","addTodo","promptUser","promptComplete","choices","map","task","value","id","checked","complete","completedTasks","markComplete","undefined","find","Object","values","Toggle","Add","Complete","Purge","removeComplete"],"mappings":"mCAAA,IA2CKA,SA3CLC,WAAAC,QAAA,cAEAC,SAAAD,QAAA,YACAE,qBAAAF,QAAA,wBAEIG,MAAoB,CACpB,IAAIJ,WAAAK,SAAS,EAAG,eAAgB,IAAIL,WAAAK,SAAS,EAAG,aAChD,IAAIL,WAAAK,SAAS,EAAG,mBAAoB,IAAIL,WAAAK,SAAS,EAAG,YAAY,IAChEC,WAAiC,IAAIH,qBAAAI,mBAAmB,OAAQH,OAChEI,eAAgB,EAEpB,SAASC,kBACLC,QAAQC,IAAOL,WAAWM,SAAQ,iBAC3BN,WAAWO,gBAAgBC,WAAU,iBAC5CR,WAAWS,cAAa,GAAMC,QAAQ,SAAAC,GAAQ,OAAAA,EAAKC,iBAGvD,SAASC,YACLT,QAAQU,QACRlB,SAASmB,OAAO,CAACC,KAAM,QAASC,KAAM,MAAOC,QAAS,gBAAgBC,KAClE,SAAAC,GAC2B,KAAnBA,EAAa,KACbpB,WAAWqB,QAAQD,EAAa,KAEpCE,eAKZ,SAASC,iBACLnB,QAAQU,QACRlB,SAASmB,OAAO,CAACC,KAAM,WAAYC,KAAM,WACrCC,QAAS,gCACTM,QAASxB,WAAWS,aAAaP,eAAeuB,IAAI,SAAAd,GAChD,MAAA,CAAEM,KAAMN,EAAKe,KAAMC,MAAOhB,EAAKiB,GAAIC,QAASlB,EAAKmB,cAClDX,KAAK,SAAAC,GACJ,IAAIW,EAAiBX,EAAkB,SACvCpB,WAAWS,cAAa,GAAMC,QAAQ,SAAAC,GAClC,OAAAX,WAAWgC,aAAarB,EAAKiB,GAAiDK,MAA7CF,EAAeG,KAAK,SAAAN,GAAM,OAAAA,IAAOjB,EAAKiB,QAC3EN,eAYZ,SAASA,aACLlB,QAAQU,QACRX,kBACAP,SAASmB,OAAO,CACZC,KAAM,OACNC,KAAM,UACNC,QAAS,gBACTM,QAASW,OAAOC,OAAO3C,YAExB0B,KAAK,SAAAC,GACJ,OAAQA,EAAiB,SACrB,KAAK3B,SAAS4C,OACVjC,QAAQU,QACRZ,eAAiBA,cACjBoB,aACA,MACJ,KAAK7B,SAAS6C,IACVzB,YACA,MACJ,KAAKpB,SAAS8C,SACkC,EAAxCvC,WAAWO,gBAAgBC,WAC3Be,iBAEAD,aAEJ,MACJ,KAAK7B,SAAS+C,MACVxC,WAAWyC,iBACXnB,iBApChB,SAAK7B,GACDA,EAAA,IAAA,eACAA,EAAA,OAAA,sBACAA,EAAA,KAAA,OACAA,EAAA,SAAA,gBACAA,EAAA,MAAA,yBALJ,CAAKA,SAAAA,UAAQ,IA0Cb6B","file":"index.min.js","sourcesContent":["import { TodoItem } from \"./todoItem\";\r\nimport { TodoCollection } from \"./todoCollection\";\r\nimport * as inquirer from 'inquirer';\r\nimport { JsonTodoCollection } from \"./jsonTodoCollection\";\r\n\r\nlet todos: TodoItem[] = [\r\n    new TodoItem(1, \"Buy Flowers\"), new TodoItem(2, \"Get Shoes\"),\r\n    new TodoItem(3, \"Collect Tickets\"), new TodoItem(4, \"Call Joe\", true)];\r\nlet collection: JsonTodoCollection = new JsonTodoCollection(\"Adam\", todos);\r\nlet showCompleted = true;\r\n\r\nfunction displayTodoList() : void {\r\n    console.log(`${collection.userName}'s Todo List `\r\n    + `(${ collection.getItemCounts().incomplete } items to do)`);\r\n    collection.getTodoItems(true).forEach(item => item.printDetails());\r\n}\r\n\r\nfunction promptAdd() : void {\r\n    console.clear();\r\n    inquirer.prompt({type: \"input\", name: \"add\", message: \"Enter task:\"}).then(\r\n        answers => {\r\n            if (answers[\"add\"] !== \"\") {\r\n                collection.addTodo(answers[\"add\"]);\r\n            }\r\n            promptUser();\r\n        }\r\n    )\r\n}\r\n\r\nfunction promptComplete() : void {\r\n    console.clear();\r\n    inquirer.prompt({type: \"checkbox\", name: \"complete\",\r\n        message: \"Mark Which Tasks are Complete\", \r\n        choices: collection.getTodoItems(showCompleted).map(item =>\r\n            ({name: item.task, value: item.id, checked: item.complete}))\r\n        }).then(answers => {\r\n            let completedTasks = answers[\"complete\"] as number[];\r\n            collection.getTodoItems(true).forEach(item =>\r\n                collection.markComplete(item.id, completedTasks.find(id => id === item.id) != undefined));\r\n            promptUser();\r\n        })\r\n}\r\n\r\nenum Commands {\r\n    Add = \"Add New Task\",\r\n    Toggle = \"Show/Hide Completed\",\r\n    Quit = \"Quit\",\r\n    Complete = \"Complete Task\",\r\n    Purge = \"Remove Completed Tasks\"\r\n}\r\n\r\nfunction promptUser(): void {\r\n    console.clear();\r\n    displayTodoList();\r\n    inquirer.prompt({\r\n        type: \"list\",\r\n        name: \"command\",\r\n        message: \"choose option\",\r\n        choices: Object.values(Commands),\r\n        //badProperty: true\r\n    }).then(answers => {\r\n        switch (answers[\"command\"]) {\r\n            case Commands.Toggle:\r\n                console.clear();\r\n                showCompleted = !showCompleted;\r\n                promptUser();\r\n                break;\r\n            case Commands.Add:\r\n                promptAdd();\r\n                break;\r\n            case Commands.Complete:\r\n                if (collection.getItemCounts().incomplete > 0) {\r\n                    promptComplete();\r\n                } else {\r\n                    promptUser();\r\n                }\r\n                break;\r\n            case Commands.Purge:\r\n                collection.removeComplete();\r\n                promptUser();\r\n                break;\r\n        }\r\n    })\r\n}\r\n\r\npromptUser();"]}