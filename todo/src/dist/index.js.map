{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { TodoItem } from \"./todoItem\";\r\nimport { TodoCollection } from \"./todoCollection\";\r\nimport * as inquirer from 'inquirer';\r\nimport { JsonTodoCollection } from \"./jsonTodoCollection\";\r\n\r\nlet todos: TodoItem[] = [\r\n    new TodoItem(1, \"Buy Flowers\"), new TodoItem(2, \"Get Shoes\"),\r\n    new TodoItem(3, \"Collect Tickets\"), new TodoItem(4, \"Call Joe\", true)];\r\nlet collection: JsonTodoCollection = new JsonTodoCollection(\"Adam\", todos);\r\nlet showCompleted = true;\r\n\r\nfunction displayTodoList() : void {\r\n    console.log(`${collection.userName}'s Todo List `\r\n    + `(${ collection.getItemCounts().incomplete } items to do)`);\r\n    collection.getTodoItems(true).forEach(item => item.printDetails());\r\n}\r\n\r\nfunction promptAdd() : void {\r\n    console.clear();\r\n    inquirer.prompt({type: \"input\", name: \"add\", message: \"Enter task:\"}).then(\r\n        answers => {\r\n            if (answers[\"add\"] !== \"\") {\r\n                collection.addTodo(answers[\"add\"]);\r\n            }\r\n            promptUser();\r\n        }\r\n    )\r\n}\r\n\r\nfunction promptComplete() : void {\r\n    console.clear();\r\n    inquirer.prompt({type: \"checkbox\", name: \"complete\",\r\n        message: \"Mark Which Tasks are Complete\", \r\n        choices: collection.getTodoItems(showCompleted).map(item =>\r\n            ({name: item.task, value: item.id, checked: item.complete}))\r\n        }).then(answers => {\r\n            let completedTasks = answers[\"complete\"] as number[];\r\n            collection.getTodoItems(true).forEach(item =>\r\n                collection.markComplete(item.id, completedTasks.find(id => id === item.id) != undefined));\r\n            promptUser();\r\n        })\r\n}\r\n\r\nenum Commands {\r\n    Add = \"Add New Task\",\r\n    Toggle = \"Show/Hide Completed\",\r\n    Quit = \"Quit\",\r\n    Complete = \"Complete Task\",\r\n    Purge = \"Remove Completed Tasks\"\r\n}\r\n\r\nfunction promptUser(): void {\r\n    console.clear();\r\n    displayTodoList();\r\n    inquirer.prompt({\r\n        type: \"list\",\r\n        name: \"command\",\r\n        message: \"choose option\",\r\n        choices: Object.values(Commands),\r\n        //badProperty: true\r\n    }).then(answers => {\r\n        switch (answers[\"command\"]) {\r\n            case Commands.Toggle:\r\n                console.clear();\r\n                showCompleted = !showCompleted;\r\n                promptUser();\r\n                break;\r\n            case Commands.Add:\r\n                promptAdd();\r\n                break;\r\n            case Commands.Complete:\r\n                if (collection.getItemCounts().incomplete > 0) {\r\n                    promptComplete();\r\n                } else {\r\n                    promptUser();\r\n                }\r\n                break;\r\n            case Commands.Purge:\r\n                collection.removeComplete();\r\n                promptUser();\r\n                break;\r\n        }\r\n    })\r\n}\r\n\r\npromptUser();"]}