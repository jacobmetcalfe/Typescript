{"version":3,"sources":["todoCollection.ts"],"names":[],"mappings":";;;;;;;;;AAAA,uCAAsC;AAOtC;IAGI,wBAAmB,QAAgB,EAAS,SAA0B;QAAtE,iBAEC;QAF2C,0BAAA,EAAA,cAA0B;QAAnD,aAAQ,GAAR,QAAQ,CAAQ;QAAS,cAAS,GAAT,SAAS,CAAiB;QAF9D,WAAM,GAAW,CAAC,CAAC;QACjB,YAAO,GAAG,IAAI,GAAG,EAAoB,CAAC;QAE5C,SAAS,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAA/B,CAA+B,CAAC,CAAA;IAC9D,CAAC;IAED,gCAAO,GAAP,UAAQ,IAAY;QAChB,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAClC,IAAI,CAAC,MAAM,EAAE,CAAC;SACjB;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,mBAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;QACrD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,mBAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,uCAAc,GAAd;QAAA,iBAMC;QALG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAE,UAAA,IAAI;YACtB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,KAAI,CAAC,OAAO,CAAC,QAAM,CAAA,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;aAC/B;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED,oCAAW,GAAX,UAAY,EAAU;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAChC,CAAC;IAED,qCAAY,GAAZ,UAAa,eAAwB;QACjC,OAAO,eAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,eAAe,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAjC,CAAiC,CAAC,CAAC;IACxF,CAAC;IAED,sCAAa,GAAb;QACI,OAAO;YACH,KAAK,EAAG,IAAI,CAAC,OAAO,CAAC,IAAI;YACzB,UAAU,EAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,MAAM;SAC/C,CAAC;IACN,CAAC;IAED,qCAAY,GAAZ,UAAa,EAAU,EAAE,QAAiB;QACtC,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,QAAQ,EAAE;YACV,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAChC;IACL,CAAC;IAEL,qBAAC;AAAD,CA9CA,AA8CC,IAAA;AA9CY,wCAAc","file":"todoCollection.js","sourcesContent":["import { TodoItem } from \"./todoItem\";\r\n\r\ntype ItemCounts = {\r\n    total : number,\r\n    incomplete : number\r\n}\r\n\r\nexport class TodoCollection {\r\n    private nextId: number = 1;\r\n    protected itemMap = new Map<number, TodoItem>();\r\n    constructor(public userName: string, public todoItems: TodoItem[] = []){\r\n        todoItems.forEach(item => this.itemMap.set(item.id, item))\r\n    }\r\n\r\n    addTodo(task: string) : number {\r\n        while (this.getTodoById(this.nextId)) {\r\n            this.nextId++;\r\n        }\r\n        this.todoItems.push(new TodoItem(this.nextId, task));\r\n        this.itemMap.set(this.nextId, new TodoItem(this.nextId, task));\r\n        return this.nextId;\r\n    }\r\n\r\n    removeComplete(){\r\n        this.itemMap.forEach( item => {\r\n            if (item.complete) {\r\n                this.itemMap.delete(item.id)\r\n            }\r\n        })\r\n    }\r\n\r\n    getTodoById(id: number) : TodoItem{\r\n        return this.itemMap.get(id);\r\n    }\r\n\r\n    getTodoItems(includeComplete: boolean): TodoItem[] {\r\n        return [...this.itemMap.values()].filter(item => includeComplete || !item.complete);\r\n    }\r\n\r\n    getItemCounts() : ItemCounts {\r\n        return {\r\n            total : this.itemMap.size,\r\n            incomplete : this.getTodoItems(false).length\r\n        };\r\n    }\r\n\r\n    markComplete(id: number, complete: boolean) {\r\n        const todoItem = this.getTodoById(id);\r\n        if (todoItem) {\r\n            todoItem.complete = complete;\r\n        }\r\n    }\r\n\r\n}"]}